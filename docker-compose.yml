services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: orders_l0
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d orders_l0"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,CLIENT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,CLIENT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:19092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s

  backend:
    build: ./apps/backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: order_user
      DB_PASSWORD: 12345678
      DB_NAME: orders_l0
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"

  frontend:
    build:
      context: ./apps/frontend
    ports:
      - "5000:3000"
    environment:
      - API_URL=http://localhost:8080
    depends_on:
      - backend

volumes:
  postgres_data: